//
// Generated by Bluespec Compiler (build 14ff62d)
//
// On Mon Jul 25 15:00:14 BST 2022
//
//
// Ports:
// Name                         I/O  size props
// wrap64_getBoundsInfo           O   196
// wrap64_getBoundsInfo_cap       I    91
//
// Combinational paths from inputs to outputs:
//   wrap64_getBoundsInfo_cap -> wrap64_getBoundsInfo
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module module_wrap64_getBoundsInfo(wrap64_getBoundsInfo_cap,
				   wrap64_getBoundsInfo);
  // value method wrap64_getBoundsInfo
  input  [90 : 0] wrap64_getBoundsInfo_cap;
  output [195 : 0] wrap64_getBoundsInfo;

  // signals for module outputs
  wire [195 : 0] wrap64_getBoundsInfo;

  // remaining internal signals
  wire [32 : 0] baseBitsFull__h79,
		repBoundBitsFull__h81,
		result__h619,
		topBitsFull__h80,
		top__h89,
		x__h101,
		x__h282,
		x__h674,
		x__h713,
		x__h745,
		x__h747;
  wire [24 : 0] addrUpperBits__h84,
		addrUpperHi__h85,
		addrUpperLo__h86,
		allOnesExpShifted__h82,
		oneExpShifted__h83;
  wire [9 : 0] correctBase__h92, correctTop__h93, x__h677;
  wire [7 : 0] repBoundBits__h77;
  wire [1 : 0] IF_wrap64_getBoundsInfo_cap_BIT_6_1_THEN_0b0_C_ETC___d34;

  // value method wrap64_getBoundsInfo
  assign wrap64_getBoundsInfo =
	     { x__h101[31:0],
	       x__h282,
	       x__h674,
	       x__h713[31:0],
	       x__h745,
	       x__h747 } ;

  // remaining internal signals
  assign IF_wrap64_getBoundsInfo_cap_BIT_6_1_THEN_0b0_C_ETC___d34 =
	     top__h89[32:31] -
	     { 1'b0,
	       (wrap64_getBoundsInfo_cap[31:26] == 6'd24) ?
		 wrap64_getBoundsInfo_cap[17] :
		 x__h101[31] } ;
  assign addrUpperBits__h84 =
	     { 1'b0, wrap64_getBoundsInfo_cap[89:66] } &
	     allOnesExpShifted__h82 ;
  assign addrUpperHi__h85 =
	     addrUpperBits__h84 +
	     (wrap64_getBoundsInfo_cap[4] ? 25'd0 : oneExpShifted__h83) ;
  assign addrUpperLo__h86 =
	     addrUpperBits__h84 +
	     (wrap64_getBoundsInfo_cap[4] ? allOnesExpShifted__h82 : 25'd0) ;
  assign allOnesExpShifted__h82 =
	     25'd33554431 << wrap64_getBoundsInfo_cap[31:26] ;
  assign baseBitsFull__h79 =
	     { 25'd0, wrap64_getBoundsInfo_cap[17:10] } <<
	     wrap64_getBoundsInfo_cap[31:26] ;
  assign correctBase__h92 =
	     { wrap64_getBoundsInfo_cap[1:0],
	       wrap64_getBoundsInfo_cap[17:10] } ;
  assign correctTop__h93 =
	     { wrap64_getBoundsInfo_cap[3:2],
	       wrap64_getBoundsInfo_cap[25:18] } ;
  assign oneExpShifted__h83 = 25'd1 << wrap64_getBoundsInfo_cap[31:26] ;
  assign repBoundBitsFull__h81 =
	     { 25'd0, repBoundBits__h77 } << wrap64_getBoundsInfo_cap[31:26] ;
  assign repBoundBits__h77 = { wrap64_getBoundsInfo_cap[9:7], 5'd0 } ;
  assign result__h619 = { ~top__h89[32], top__h89[31:0] } ;
  assign topBitsFull__h80 =
	     { 25'd0, wrap64_getBoundsInfo_cap[25:18] } <<
	     wrap64_getBoundsInfo_cap[31:26] ;
  assign top__h89 =
	     { wrap64_getBoundsInfo_cap[6] ?
		 addrUpperHi__h85 :
		 addrUpperLo__h86,
	       8'd0 } |
	     topBitsFull__h80 ;
  assign x__h101 =
	     { wrap64_getBoundsInfo_cap[5] ?
		 addrUpperHi__h85 :
		 addrUpperLo__h86,
	       8'd0 } |
	     baseBitsFull__h79 ;
  assign x__h282 =
	     (wrap64_getBoundsInfo_cap[31:26] < 6'd25 &&
	      IF_wrap64_getBoundsInfo_cap_BIT_6_1_THEN_0b0_C_ETC___d34 >
	      2'd1) ?
	       result__h619 :
	       top__h89 ;
  assign x__h674 = { 23'd0, x__h677 } << wrap64_getBoundsInfo_cap[31:26] ;
  assign x__h677 = correctTop__h93 - correctBase__h92 ;
  assign x__h713 = { addrUpperLo__h86, 8'd0 } | repBoundBitsFull__h81 ;
  assign x__h745 = { addrUpperHi__h85, 8'd0 } | repBoundBitsFull__h81 ;
  assign x__h747 = { oneExpShifted__h83, 8'd0 } ;
endmodule  // module_wrap64_getBoundsInfo

