//
// Generated by Bluespec Compiler, version 2022.01-37-gaf852df5 (build af852df5)
//
// On Fri Jul  5 14:25:24 BST 2024
//
//
// Ports:
// Name                         I/O  size props
// wrap64_isAccessInBounds        O     1
// wrap64_isAccessInBounds_capPipe  I    91
// wrap64_isAccessInBounds_logAccessWidth  I     2
//
// Combinational paths from inputs to outputs:
//   (wrap64_isAccessInBounds_capPipe,
//    wrap64_isAccessInBounds_logAccessWidth) -> wrap64_isAccessInBounds
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module module_wrap64_isAccessInBounds(wrap64_isAccessInBounds_capPipe,
				      wrap64_isAccessInBounds_logAccessWidth,
				      wrap64_isAccessInBounds);
  // value method wrap64_isAccessInBounds
  input  [90 : 0] wrap64_isAccessInBounds_capPipe;
  input  [1 : 0] wrap64_isAccessInBounds_logAccessWidth;
  output wrap64_isAccessInBounds;

  // signals for module outputs
  wire wrap64_isAccessInBounds;

  // remaining internal signals
  reg [7 : 0] x__h163;
  wire [31 : 0] wrap64_isAccessInBounds_capPipe_BITS_89_TO_58__ETC___d26;
  wire [2 : 0] repBound__h148;
  wire IF_wrap64_isAccessInBounds_capPipe_BITS_25_TO__ETC___d37,
       wrap64_isAccessInBounds_capPipe_BITS_25_TO_23__ETC___d23;

  // value method wrap64_isAccessInBounds
  assign wrap64_isAccessInBounds =
	     wrap64_isAccessInBounds_capPipe[90] &&
	     ((wrap64_isAccessInBounds_capPipe[6] ==
	       wrap64_isAccessInBounds_capPipe[4]) ?
		wrap64_isAccessInBounds_capPipe[57:50] <
		wrap64_isAccessInBounds_capPipe[25:18] :
		wrap64_isAccessInBounds_capPipe[6]) &&
	     ((wrap64_isAccessInBounds_capPipe[5] ==
	       wrap64_isAccessInBounds_capPipe[4]) ?
		wrap64_isAccessInBounds_capPipe[57:50] >=
		wrap64_isAccessInBounds_capPipe[17:10] :
		wrap64_isAccessInBounds_capPipe[4]) &&
	     (wrap64_isAccessInBounds_capPipe[31:26] >= 6'd3 ||
	      IF_wrap64_isAccessInBounds_capPipe_BITS_25_TO__ETC___d37) ;

  // remaining internal signals
  assign IF_wrap64_isAccessInBounds_capPipe_BITS_25_TO__ETC___d37 =
	     (wrap64_isAccessInBounds_capPipe_BITS_25_TO_23__ETC___d23 ==
	      x__h163[7:5] < repBound__h148) ?
	       x__h163 <= wrap64_isAccessInBounds_capPipe[25:18] :
	       wrap64_isAccessInBounds_capPipe_BITS_25_TO_23__ETC___d23 ;
  assign repBound__h148 = wrap64_isAccessInBounds_capPipe[17:15] - 3'b001 ;
  assign wrap64_isAccessInBounds_capPipe_BITS_25_TO_23__ETC___d23 =
	     wrap64_isAccessInBounds_capPipe[25:23] < repBound__h148 ;
  assign wrap64_isAccessInBounds_capPipe_BITS_89_TO_58__ETC___d26 =
	     wrap64_isAccessInBounds_capPipe[89:58] +
	     (32'd1 << wrap64_isAccessInBounds_logAccessWidth) ;
  always@(wrap64_isAccessInBounds_capPipe or
	  wrap64_isAccessInBounds_capPipe_BITS_89_TO_58__ETC___d26)
  begin
    case (wrap64_isAccessInBounds_capPipe[27:26])
      2'd0:
	  x__h163 =
	      wrap64_isAccessInBounds_capPipe_BITS_89_TO_58__ETC___d26[7:0];
      2'd1:
	  x__h163 =
	      wrap64_isAccessInBounds_capPipe_BITS_89_TO_58__ETC___d26[8:1];
      2'd2:
	  x__h163 =
	      wrap64_isAccessInBounds_capPipe_BITS_89_TO_58__ETC___d26[9:2];
      2'd3: x__h163 = 8'hAA;
    endcase
  end
endmodule  // module_wrap64_isAccessInBounds

