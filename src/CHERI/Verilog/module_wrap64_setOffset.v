//
// Generated by Bluespec Compiler, version 2022.01-37-gaf852df5 (build af852df5)
//
// On Fri Jul  5 14:25:23 BST 2024
//
//
// Ports:
// Name                         I/O  size props
// wrap64_setOffset               O    92
// wrap64_setOffset_cap           I    91
// wrap64_setOffset_offset        I    32
//
// Combinational paths from inputs to outputs:
//   (wrap64_setOffset_cap, wrap64_setOffset_offset) -> wrap64_setOffset
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module module_wrap64_setOffset(wrap64_setOffset_cap,
			       wrap64_setOffset_offset,
			       wrap64_setOffset);
  // value method wrap64_setOffset
  input  [90 : 0] wrap64_setOffset_cap;
  input  [31 : 0] wrap64_setOffset_offset;
  output [91 : 0] wrap64_setOffset;

  // signals for module outputs
  wire [91 : 0] wrap64_setOffset;

  // remaining internal signals
  reg [1 : 0] mask__h554;
  wire [31 : 0] addBase__h585, result_d_address__h565, x__h482;
  wire [23 : 0] highOffsetBits__h78, mask__h586, signBits__h75, x__h105;
  wire [9 : 0] x__h636;
  wire [7 : 0] newAddrBits__h553,
	       result_d_addrBits__h566,
	       toBoundsM1__h88,
	       toBounds__h87;
  wire [3 : 0] IF_wrap64_setOffset_cap_BITS_25_TO_23_8_ULT_wr_ETC___d62;
  wire [2 : 0] repBound__h816;
  wire IF_wrap64_setOffset_cap_BITS_31_TO_26_EQ_26_6__ETC___d52,
       IF_wrap64_setOffset_offset_BIT_31_THEN_NOT_wra_ETC___d19,
       wrap64_setOffset_cap_BITS_17_TO_15_6_ULT_wrap6_ETC___d50,
       wrap64_setOffset_cap_BITS_25_TO_23_8_ULT_wrap6_ETC___d49;

  // value method wrap64_setOffset
  assign wrap64_setOffset =
	     { highOffsetBits__h78 == 24'd0 &&
	       IF_wrap64_setOffset_offset_BIT_31_THEN_NOT_wra_ETC___d19 ||
	       wrap64_setOffset_cap[31:26] >= 6'd24,
	       (highOffsetBits__h78 == 24'd0 &&
		IF_wrap64_setOffset_offset_BIT_31_THEN_NOT_wra_ETC___d19 ||
		wrap64_setOffset_cap[31:26] >= 6'd24) &&
	       wrap64_setOffset_cap[90],
	       result_d_address__h565,
	       result_d_addrBits__h566,
	       wrap64_setOffset_cap[49:10],
	       repBound__h816,
	       wrap64_setOffset_cap_BITS_25_TO_23_8_ULT_wrap6_ETC___d49,
	       wrap64_setOffset_cap_BITS_17_TO_15_6_ULT_wrap6_ETC___d50,
	       IF_wrap64_setOffset_cap_BITS_31_TO_26_EQ_26_6__ETC___d52,
	       IF_wrap64_setOffset_cap_BITS_25_TO_23_8_ULT_wr_ETC___d62 } ;

  // remaining internal signals
  assign IF_wrap64_setOffset_cap_BITS_25_TO_23_8_ULT_wr_ETC___d62 =
	     { (wrap64_setOffset_cap_BITS_25_TO_23_8_ULT_wrap6_ETC___d49 ==
		IF_wrap64_setOffset_cap_BITS_31_TO_26_EQ_26_6__ETC___d52) ?
		 2'd0 :
		 ((wrap64_setOffset_cap_BITS_25_TO_23_8_ULT_wrap6_ETC___d49 &&
		   !IF_wrap64_setOffset_cap_BITS_31_TO_26_EQ_26_6__ETC___d52) ?
		    2'd1 :
		    2'd3),
	       (wrap64_setOffset_cap_BITS_17_TO_15_6_ULT_wrap6_ETC___d50 ==
		IF_wrap64_setOffset_cap_BITS_31_TO_26_EQ_26_6__ETC___d52) ?
		 2'd0 :
		 ((wrap64_setOffset_cap_BITS_17_TO_15_6_ULT_wrap6_ETC___d50 &&
		   !IF_wrap64_setOffset_cap_BITS_31_TO_26_EQ_26_6__ETC___d52) ?
		    2'd1 :
		    2'd3) } ;
  assign IF_wrap64_setOffset_cap_BITS_31_TO_26_EQ_26_6__ETC___d52 =
	     result_d_addrBits__h566[7:5] < repBound__h816 ;
  assign IF_wrap64_setOffset_offset_BIT_31_THEN_NOT_wra_ETC___d19 =
	     wrap64_setOffset_offset[31] ?
	       x__h482[7:0] >= toBounds__h87 :
	       x__h482[7:0] <= toBoundsM1__h88 ;
  assign addBase__h585 =
	     { {22{x__h636[9]}}, x__h636 } << wrap64_setOffset_cap[31:26] ;
  assign highOffsetBits__h78 = x__h105 & mask__h586 ;
  assign mask__h586 = 24'd16777215 << wrap64_setOffset_cap[31:26] ;
  assign newAddrBits__h553 = wrap64_setOffset_cap[17:10] + x__h482[7:0] ;
  assign repBound__h816 = wrap64_setOffset_cap[17:15] - 3'b001 ;
  assign result_d_addrBits__h566 = { mask__h554, 6'd63 } & newAddrBits__h553 ;
  assign result_d_address__h565 =
	     { wrap64_setOffset_cap[89:66] & mask__h586, 8'd0 } +
	     addBase__h585 +
	     wrap64_setOffset_offset ;
  assign signBits__h75 = {24{wrap64_setOffset_offset[31]}} ;
  assign toBoundsM1__h88 = { 3'b110, ~wrap64_setOffset_cap[14:10] } ;
  assign toBounds__h87 = 8'd224 - { 3'b0, wrap64_setOffset_cap[14:10] } ;
  assign wrap64_setOffset_cap_BITS_17_TO_15_6_ULT_wrap6_ETC___d50 =
	     wrap64_setOffset_cap[17:15] < repBound__h816 ;
  assign wrap64_setOffset_cap_BITS_25_TO_23_8_ULT_wrap6_ETC___d49 =
	     wrap64_setOffset_cap[25:23] < repBound__h816 ;
  assign x__h105 = wrap64_setOffset_offset[31:8] ^ signBits__h75 ;
  assign x__h482 = wrap64_setOffset_offset >> wrap64_setOffset_cap[31:26] ;
  assign x__h636 =
	     { wrap64_setOffset_cap[1:0], wrap64_setOffset_cap[17:10] } ;
  always@(wrap64_setOffset_cap)
  begin
    case (wrap64_setOffset_cap[31:26])
      6'd25: mask__h554 = 2'b01;
      6'd26: mask__h554 = 2'b0;
      default: mask__h554 = 2'b11;
    endcase
  end
endmodule  // module_wrap64_setOffset

